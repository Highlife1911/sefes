<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

// ARCHIVISTS
const int ROBOTS = 1;     // total number of robots in system
typedef int[0,ROBOTS-1] robotid_t;
chan enter_lane[ROBOTS];
int target_archiv[ROBOTS];

// LANES
const int N = 1;         // total number of available Lanes
typedef int[0,N-1] id_t;
chan leave_archiv[N];
bool is_archiv_occupied[N];

// ANTEROOM
chan enter_anteroom[N];
chan leave_anteroom[N];
bool can_enter_anteroom[N];
int lowest_id[N];
int heighest_id[N];


// LANES
const int M = 1; // lanes per archiv
typedef int[0,(M*N)-1] laneid_t;
chan reserve_lane[M*N], leave_lane[N];

// MASTER
chan approve_lane;
laneid_t drive_to;

// TIMES
const int enter_lane_time = 10;
const int leave_archiv_time = 10;
const int search_archiv_time = 10;</declaration>
	<template>
		<name>Anteroom</name>
		<parameter>const id_t id</parameter>
		<declaration>int counter_archivists = 0;</declaration>
		<location id="id0" x="-552" y="-255">
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-620" y="-229">leave_anteroom[id]?</label>
			<label kind="assignment" x="-620" y="-212">counter_archivists--</label>
			<nail x="-535" y="-238"/>
			<nail x="-467" y="-238"/>
			<nail x="-467" y="-212"/>
			<nail x="-646" y="-212"/>
			<nail x="-646" y="-238"/>
			<nail x="-569" y="-238"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-629" y="-314">enter_anteroom[id]?</label>
			<label kind="assignment" x="-629" y="-297">counter_archivists++</label>
			<nail x="-569" y="-272"/>
			<nail x="-646" y="-272"/>
			<nail x="-646" y="-297"/>
			<nail x="-467" y="-297"/>
			<nail x="-467" y="-272"/>
			<nail x="-527" y="-272"/>
		</transition>
	</template>
	<template>
		<name>Lane</name>
		<parameter>const laneid_t id</parameter>
		<declaration>clock time;

int travel_time = (id % M) * 5 + 5;
int target_archiv = id / M;</declaration>
		<location id="id1" x="-119" y="-59" color="#00ff00">
			<name x="-179" y="-67">Empty</name>
		</location>
		<location id="id2" x="289" y="68" color="#0000ff">
			<name x="306" y="60">Occupied</name>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="25" y="68">time&gt;=travel_time</label>
			<label kind="synchronisation" x="-17" y="51">enter_anteroom[target_archiv]!</label>
			<label kind="assignment" x="-68" y="85">can_enter_anteroom[target_archiv]=true</label>
			<nail x="272" y="68"/>
			<nail x="280" y="68"/>
			<nail x="76" y="68"/>
			<nail x="-119" y="68"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-76" y="-59">can_enter_anteroom[target_archiv]==false</label>
			<label kind="synchronisation" x="34" y="-76">reserve_lane[id]?</label>
			<label kind="assignment" x="51" y="-42">time=0</label>
			<nail x="-102" y="-59"/>
			<nail x="68" y="-59"/>
			<nail x="289" y="-59"/>
		</transition>
	</template>
	<template>
		<name>Archivist</name>
		<parameter>const robotid_t id</parameter>
		<declaration>clock time;
int wait_id;</declaration>
		<location id="id3" x="-144" y="34">
			<name x="-187" y="25">Exit</name>
		</location>
		<location id="id4" x="-144" y="-255">
			<name x="-195" y="-263">Pool</name>
		</location>
		<location id="id5" x="-144" y="-340">
			<name x="-195" y="-348">Lane</name>
		</location>
		<location id="id6" x="425" y="34">
			<name x="442" y="25">Archiv</name>
		</location>
		<location id="id7" x="425" y="-255">
			<name x="442" y="-263">Anteroom</name>
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-136" y="-153">time&gt;=leave_archiv_time</label>
			<label kind="synchronisation" x="-136" y="-170">leave_archiv[target_archiv[id]]!</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id3"/>
			<label kind="guard" x="68" y="42">time&gt;=search_archiv_time</label>
			<label kind="assignment" x="68" y="59">is_archiv_occupied[target_archiv[id]]=false,
time=0</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="guard" x="93" y="-178">is_archiv_occupied[target_archiv[id]]==false &amp;&amp; 
wait_id==lowest_id[target_archiv[id]]</label>
			<label kind="synchronisation" x="178" y="-195">leave_anteroom[target_archiv[id]]!</label>
			<label kind="assignment" x="127" y="-144">is_archiv_occupied[target_archiv[id]]=true,
lowest_id[target_archiv[id]]=
(lowest_id[target_archiv[id]]+1)%ROBOTS,
time=0</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id7"/>
			<label kind="guard" x="68" y="-340">can_enter_anteroom[target_archiv[id]]==true</label>
			<label kind="assignment" x="68" y="-323">can_enter_anteroom[target_archiv[id]]=false,
wait_id=heighest_id[target_archiv[id]],
heighest_id[target_archiv[id]]=
(heighest_id[target_archiv[id]]+1)% ROBOTS</label>
			<nail x="425" y="-340"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-136" y="-306">enter_lane[id]?</label>
		</transition>
	</template>
	<template>
		<name>LaneEntry</name>
		<parameter>const robotid_t id</parameter>
		<declaration>laneid_t internal;
clock time;</declaration>
		<location id="id8" x="-9" y="144">
			<name x="-119" y="136">Lane_entered</name>
		</location>
		<location id="id9" x="-9" y="0">
			<name x="-60" y="-8">Pool</name>
		</location>
		<location id="id10" x="229" y="0">
			<name x="246" y="-8">Lane_approved</name>
		</location>
		<location id="id11" x="229" y="144">
			<name x="246" y="136">Lane_reserved</name>
		</location>
		<init ref="id9"/>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-187" y="51">leave_archiv[internal/M]?</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id8"/>
			<label kind="guard" x="34" y="144">time&gt;=enter_lane_time</label>
			<label kind="synchronisation" x="59" y="127">enter_lane[id]!</label>
			<label kind="assignment" x="17" y="161">target_archiv[id]=internal/M</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="237" y="51">reserve_lane[internal]!</label>
			<label kind="assignment" x="238" y="68">time=0</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="59" y="-17">approve_lane?</label>
			<label kind="assignment" x="51" y="0">internal=drive_to</label>
		</transition>
	</template>
	<template>
		<name>Supervisor</name>
		<parameter>const id_t id</parameter>
		<declaration>int take_lane = 0;
clock reset_time;</declaration>
		<location id="id12" x="-289" y="-204">
			<name x="-348" y="-212">Ready</name>
		</location>
		<location id="id13" x="-25" y="-144">
			<name x="-8" y="-152">Waiting</name>
			<label kind="invariant" x="-68" y="-127">reset_time&lt;=10</label>
		</location>
		<init ref="id12"/>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="guard" x="-221" y="-144">reset_time&gt;=10</label>
			<nail x="-34" y="-144"/>
			<nail x="-289" y="-144"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-213" y="-221">approve_lane!</label>
			<label kind="assignment" x="-238" y="-204">drive_to=id*M+take_lane, 
reset_time=0</label>
			<nail x="-25" y="-204"/>
		</transition>
	</template>
	<system>// List one or more processes to be composed into a system.
system Lane, Supervisor, Archivist, LaneEntry, Anteroom;</system>
	<queries>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
